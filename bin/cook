#!/bin/bash
set -e

if [ -n "$1" ]; then
  node="$1"
else
  node="$HOME/.cook"
fi

if [ ! -f "$node" ]; then
  echo "cook node.json" >&2
  exit 1
fi

root="/tmp/chef-solo"
gemhome="$root/ruby"

GEMPATH=($gemhome/gems/*/bin)
GEMRUBYLIB=($gemhome/gems/*/{ext,lib})

OLDIFS="$IFS"
IFS=":"
export PATH="${GEMPATH[*]}:$PATH"
export RUBYLIB="${GEMRUBYLIB[*]}:$RUBYLIB"
IFS="$OLDIFS"

if [ ! -f /tmp/chef-solo/ruby/bin/chef-solo ]; then
  echo "Installing chef" >&2
  /usr/bin/gem install chef --no-rdoc --no-ri --install-dir $gemhome
fi


cp "$node" "$root/node.json"

download_cookbooks() {
  local path target i
  i=0

  ruby -rjson -e "puts JSON.load(open(ARGV[0]))['cookbooks']" "$node" |
    while read path; do
      target="$root/cookbooks-$i"
      echo $target

      rm -rf "$target"
      mkdir -p "$target"

      if [ -f $path ]; then
        cp -R "$path/" "$target"
      else
        echo "Downloading $path" >&2
        curl -sSfL "$path" | tar -xz -C "$target" -m --strip 1
      fi

      i=$[$i+1]
    done
}

IFS=" " cookbook_path=($(download_cookbooks))

cat > "$root/solo.rb" <<EOS
log_level        :info
verbose_logging   nil
json_attribs     "$root/node.json"
cookbook_path    %w($cookbook_path)
file_cache_path  "$root"
file_backup_path "$root/backup"
sandbox_path     "$root/sandboxes"
cache_options    :path => "$root/cache/checksums", :skip_expires => true
ssl_verify_mode  :verify_peer
EOS

exec /usr/bin/ruby -S chef-solo -c "$root/solo.rb"
